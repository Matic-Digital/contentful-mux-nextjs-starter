#!/bin/bash

# Development Environment Management Script
# This script provides commands for managing the local development environment

# Set base paths
SCRIPT_DIR="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"
DOCKER_DIR="$PROJECT_ROOT/docker"
CONFIG_DIR="$PROJECT_ROOT"

# Color definitions for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to clean up on exit
cleanup() {
    echo -e "\n${YELLOW}Cleaning up development environment...${NC}"
    docker compose -f "${DOCKER_DIR}/docker-compose.yml" down -v
    echo -e "${GREEN}✓ Development environment cleaned${NC}"
    exit 0
}

# Function to show logs and handle Ctrl+C
show_logs_with_cleanup() {
    # Set up trap for cleanup
    trap 'cleanup' SIGINT SIGTERM
    
    # Show logs and wait
    docker compose -f "${DOCKER_DIR}/docker-compose.yml" logs -f &
    wait $!
}

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Error: Docker is not running. Please start Docker Desktop first.${NC}"
        exit 1
    fi
}

# Function to check environment file
check_env() {
    if [ ! -f "${CONFIG_DIR}/.env.development" ]; then
        echo -e "${YELLOW}Warning: .env.development not found${NC}"
        if [ -f "${CONFIG_DIR}/.env.example" ]; then
            cp "${CONFIG_DIR}/.env.example" "${CONFIG_DIR}/.env.development"
            echo -e "${GREEN}Created .env.development from example. Please update with your credentials.${NC}"
        else
            echo -e "${RED}Error: .env.example not found${NC}"
            exit 1
        fi
    fi
}

# Function to display usage information
show_usage() {
    echo "Usage: $0 {setup|start|stop|restart|logs|shell|clean|status|build|purge|check}"
    echo
    echo "Commands:"
    echo "  setup   - Initial setup of development environment"
    echo "  start   - Start development environment"
    echo "  stop    - Stop development environment"
    echo "  restart - Restart development environment"
    echo "  logs    - Show container logs"
    echo "  shell   - Open shell in app container"
    echo "  clean   - Remove all containers and volumes"
    echo "  status  - Show status of containers"
    echo "  build   - Run next build in the container"
    echo "  purge   - Remove all Matic Docker resources (containers, images, volumes)"
    echo "  check   - Run linting and type checking in the container"
}

# Main command handler
case "$1" in
    "setup")
        echo -e "${YELLOW}Setting up development environment...${NC}"
        check_docker
        check_env
        
        echo -e "${YELLOW}Building containers...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" build --no-cache
        
        echo -e "${YELLOW}Starting development environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        
        echo -e "${GREEN}✓ Development environment setup complete${NC}"
        echo -e "Access your app at: ${GREEN}http://localhost:3000${NC}"
        ;;
        
    "build")
        echo -e "${YELLOW}Running Next.js build in container...${NC}"
        check_docker
        check_env
        
        # Ensure container is running or start it
        if ! docker compose -f "${DOCKER_DIR}/docker-compose.yml" ps --status running | grep -q app; then
            echo -e "${YELLOW}Starting container for build...${NC}"
            docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        fi
        
        echo -e "${YELLOW}Building Next.js application...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec app npm run build
        
        echo -e "${GREEN}✓ Build complete${NC}"
        ;;
        
    "start")
        echo -e "${YELLOW}Starting development environment...${NC}"
        check_docker
        check_env
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        echo -e "${GREEN}✓ Development environment started${NC}"
        echo -e "Access your app at: ${GREEN}http://localhost:3000${NC}"
        
        # Show logs with cleanup on Ctrl+C
        echo -e "\n${YELLOW}Showing container logs (Ctrl+C to stop and cleanup):${NC}"
        show_logs_with_cleanup
        ;;
        
    "stop")
        echo -e "${YELLOW}Stopping development environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
        echo -e "${GREEN}✓ Development environment stopped${NC}"
        ;;
        
    "restart")
        echo -e "${YELLOW}Restarting development environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        echo -e "${GREEN}✓ Development environment restarted${NC}"
        echo -e "Access your app at: ${GREEN}http://localhost:3000${NC}"
        ;;
        
    "logs")
        show_logs_with_cleanup
        ;;
        
    "shell")
        echo -e "${YELLOW}Opening shell in app container...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec app sh
        ;;
        
    "clean")
        echo -e "${YELLOW}Cleaning up development environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down -v
        echo -e "${GREEN}✓ Development environment cleaned${NC}"
        ;;
        
    "purge")
        echo -e "${YELLOW}Removing all Matic Docker resources...${NC}"
        
        # Stop and remove container
        echo -e "${YELLOW}Stopping and removing containers...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down -v
        docker rm -f Matic-Docker-App 2>/dev/null || true
        
        # Remove image
        echo -e "${YELLOW}Removing Docker images...${NC}"
        docker rmi -f matic-docker-app:dev 2>/dev/null || true
        
        # Remove volumes
        echo -e "${YELLOW}Removing volumes...${NC}"
        docker volume rm matic-docker-node-modules 2>/dev/null || true
        docker volume rm matic-docker-next-cache 2>/dev/null || true
        
        echo -e "${GREEN}✓ All Matic Docker resources have been removed${NC}"
        ;;
        
    "status")
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" ps
        ;;
        
    "check")
        echo -e "${YELLOW}Running checks in container...${NC}"
        check_docker
        check_env
        
        # Track if we started the container
        CONTAINER_STARTED=false
        
        # Ensure container is running or start it
        if ! docker compose -f "${DOCKER_DIR}/docker-compose.yml" ps --status running | grep -q app; then
            echo -e "${YELLOW}Starting container for checks...${NC}"
            docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
            CONTAINER_STARTED=true
        fi
        
        echo -e "${YELLOW}Running linting and type checking...${NC}"
        if docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app npm run check; then
            echo -e "${GREEN}✓ Checks complete${NC}"
            CHECK_STATUS=0
        else
            echo -e "${RED}✗ Checks failed${NC}"
            CHECK_STATUS=1
        fi
        
        # Stop the container if we started it
        if [ "$CONTAINER_STARTED" = true ]; then
            echo -e "${YELLOW}Stopping container...${NC}"
            docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
            echo -e "${GREEN}✓ Container stopped${NC}"
        fi
        
        # Exit with the check status
        exit $CHECK_STATUS
        ;;
        
    *)
        show_usage
        exit 1
        ;;
esac
