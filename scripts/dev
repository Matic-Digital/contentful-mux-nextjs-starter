#!/bin/bash

# Development Environment Management Script
# This script provides commands for managing the local development environment

# Set base paths
DOCKER_DIR="../docker"
CONFIG_DIR="../config"

# Color definitions for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo "Error: Docker is not running. Please start Docker Desktop first."
        exit 1
    fi
}

# Function to display usage information
show_usage() {
    echo "Usage: $0 {setup|start|stop|restart|logs|shell|clean|status}"
    echo
    echo "Commands:"
    echo "  setup   - Initial setup of development environment"
    echo "  start   - Start development environment"
    echo "  stop    - Stop development environment"
    echo "  restart - Restart development environment"
    echo "  logs    - Show container logs (optionally specify container name)"
    echo "  shell   - Open shell in app container"
    echo "  clean   - Remove all containers, volumes, and images"
    echo "  status  - Show status of containers"
}

# Main command handler
case "$1" in
    "setup")
        # Initial setup of development environment
        echo -e "${YELLOW}Setting up development environment...${NC}"
        
        # Create development environment file if it doesn't exist
        if [ ! -f "${CONFIG_DIR}/.env.development" ]; then
            if [ -f "${CONFIG_DIR}/.env.example" ]; then
                cp "${CONFIG_DIR}/.env.example" "${CONFIG_DIR}/.env.development"
                echo -e "${GREEN}Created .env.development file. Please update it with your credentials.${NC}"
            else
                echo -e "${RED}Error: .env.example not found${NC}"
                exit 1
            fi
        fi
        
        # Build and start containers
        echo -e "${YELLOW}Building containers...${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" build --no-cache
        echo -e "${YELLOW}Starting development environment...${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        echo -e "${GREEN}✓ Development environment setup complete${NC}"
        ;;
        
    "start")
        # Start development environment
        echo -e "${YELLOW}Starting development environment...${NC}"
        check_docker
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        echo -e "${GREEN}✓ Development environment started${NC}"
        ;;
        
    "stop")
        # Stop development environment
        echo -e "${YELLOW}Stopping development environment...${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" down
        echo -e "${GREEN}✓ Development environment stopped${NC}"
        ;;
        
    "restart")
        # Restart development environment
        echo -e "${YELLOW}Restarting development environment...${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" down
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        echo -e "${GREEN}✓ Development environment restarted${NC}"
        ;;
        
    "logs")
        # Show container logs
        if [ -z "$2" ]; then
            docker-compose -f "${DOCKER_DIR}/docker-compose.yml" logs -f
        else
            docker-compose -f "${DOCKER_DIR}/docker-compose.yml" logs -f "$2"
        fi
        ;;
        
    "shell")
        # Open shell in container
        echo -e "${YELLOW}Opening shell in app container...${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" exec app sh
        ;;
        
    "clean")
        # Clean up development environment
        echo -e "${YELLOW}Cleaning up development environment...${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" down -v --rmi all
        docker system prune -af --volumes
        echo -e "${GREEN}✓ Development environment cleaned${NC}"
        ;;
        
    "status")
        # Show container status
        echo -e "${YELLOW}Container Status:${NC}"
        docker-compose -f "${DOCKER_DIR}/docker-compose.yml" ps
        ;;
        
    "help" | "--help" | "-h")
        show_usage
        ;;
        
    *)
        show_usage
        exit 1
        ;;
esac
